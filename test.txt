[33m[nodemon] 1.19.1[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching: *.*[39m
[32m[nodemon] starting `node server.js`[39m
{ Category: Category,
  User: User,
  sequelize:
   Sequelize {
     options:
      { dialect: 'mysql',
        dialectModule: null,
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        clientMinMessages: 'warning',
        standardConformingStrings: true,
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'root',
        password: 'password',
        database: 'sequelize_passport',
        port: 3306 },
     config:
      { database: 'sequelize_passport',
        username: 'root',
        password: 'password',
        host: '127.0.0.1',
        port: 3306,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModule: null,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager: [ConnectionManager],
        QueryGenerator: [MySQLQueryGenerator] },
     queryInterface:
      QueryInterface { sequelize: [Circular], QueryGenerator: [MySQLQueryGenerator] },
     models: { Category: Category, User: User },
     modelManager: ModelManager { models: [Array], sequelize: [Circular] },
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [MysqlDialect],
        versionPromise: null,
        dialectName: 'mysql',
        pool: [Pool],
        lib: [Object] },
     importCache:
      { 'c:\\Users\\hunte\\Desktop\\SMU\\week-9\\project2\\app\\models\\category.js': Category,
        'c:\\Users\\hunte\\Desktop\\SMU\\week-9\\project2\\app\\models\\user.js': User } },
  Sequelize:
   { [Function: Sequelize]
     version: '5.10.2',
     options: { hooks: {} },
     Utils:
      { classToInvokable: [Function: classToInvokable],
        Promise: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        getOperators: [Function: getOperators],
        getComplexKeys: [Function: getComplexKeys],
        getComplexSize: [Function: getComplexSize],
        isWhereEmpty: [Function: isWhereEmpty],
        generateEnumName: [Function: generateEnumName],
        camelizeObjectKeys: [Function: camelizeObjectKeys],
        defaults: [Function: defaults],
        nameIndex: [Function: nameIndex],
        intersects: [Function: intersects] },
     Op:
      { eq: Symbol(eq),
        ne: Symbol(ne),
        gte: Symbol(gte),
        gt: Symbol(gt),
        lte: Symbol(lte),
        lt: Symbol(lt),
        not: Symbol(not),
        is: Symbol(is),
        in: Symbol(in),
        notIn: Symbol(notIn),
        like: Symbol(like),
        notLike: Symbol(notLike),
        iLike: Symbol(iLike),
        notILike: Symbol(notILike),
        startsWith: Symbol(startsWith),
        endsWith: Symbol(endsWith),
        substring: Symbol(substring),
        regexp: Symbol(regexp),
        notRegexp: Symbol(notRegexp),
        iRegexp: Symbol(iRegexp),
        notIRegexp: Symbol(notIRegexp),
        between: Symbol(between),
        notBetween: Symbol(notBetween),
        overlap: Symbol(overlap),
        contains: Symbol(contains),
        contained: Symbol(contained),
        adjacent: Symbol(adjacent),
        strictLeft: Symbol(strictLeft),
        strictRight: Symbol(strictRight),
        noExtendRight: Symbol(noExtendRight),
        noExtendLeft: Symbol(noExtendLeft),
        and: Symbol(and),
        or: Symbol(or),
        any: Symbol(any),
        all: Symbol(all),
        values: Symbol(values),
        col: Symbol(col),
        placeholder: Symbol(placeholder),
        join: Symbol(join) },
     Promise:
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.1',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Function],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Circular] },
     TableHints:
      { NOLOCK: 'NOLOCK',
        READUNCOMMITTED: 'READUNCOMMITTED',
        UPDLOCK: 'UPDLOCK',
        REPEATABLEREAD: 'REPEATABLEREAD',
        SERIALIZABLE: 'SERIALIZABLE',
        READCOMMITTED: 'READCOMMITTED',
        TABLOCK: 'TABLOCK',
        TABLOCKX: 'TABLOCKX',
        PAGLOCK: 'PAGLOCK',
        ROWLOCK: 'ROWLOCK',
        NOWAIT: 'NOWAIT',
        READPAST: 'READPAST',
        XLOCK: 'XLOCK',
        SNAPSHOT: 'SNAPSHOT',
        NOEXPAND: 'NOEXPAND' },
     IndexHints: { USE: 'USE', FORCE: 'FORCE', IGNORE: 'IGNORE' },
     Transaction:
      { [Function: Transaction] Transaction: [Circular], default: [Circular] },
     QueryTypes:
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator:
      { version: '10.11.0',
        toDate: [Function],
        toFloat: [Function],
        toInt: [Function],
        toBoolean: [Function],
        equals: [Function],
        contains: [Function: contains],
        matches: [Function],
        isEmail: [Function],
        isURL: [Function],
        isMACAddress: [Function],
        isIP: [Function],
        isIPRange: [Function],
        isFQDN: [Function],
        isBoolean: [Function],
        isAlpha: [Function: isAlpha],
        isAlphaLocales: [Array],
        isAlphanumeric: [Function: isAlphanumeric],
        isAlphanumericLocales: [Array],
        isNumeric: [Function],
        isPort: [Function],
        isLowercase: [Function],
        isUppercase: [Function],
        isAscii: [Function],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function],
        isMultibyte: [Function],
        isSurrogatePair: [Function],
        isInt: [Function],
        isFloat: [Function: isFloat],
        isFloatLocales: [Array],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function],
        isDivisibleBy: [Function],
        isHexColor: [Function],
        isISRC: [Function],
        isMD5: [Function],
        isHash: [Function],
        isJWT: [Function],
        isJSON: [Function],
        isEmpty: [Function],
        isLength: [Function],
        isByteLength: [Function],
        isUUID: [Function],
        isMongoId: [Function],
        isAfter: [Function],
        isBefore: [Function],
        isIn: [Function],
        isCreditCard: [Function],
        isIdentityCard: [Function],
        isISIN: [Function],
        isISBN: [Function],
        isISSN: [Function],
        isMobilePhone: [Function: isMobilePhone],
        isMobilePhoneLocales: [Array],
        isPostalCode: [Function: _default],
        isPostalCodeLocales: [Array],
        isCurrency: [Function],
        isISO8601: [Function],
        isRFC3339: [Function],
        isISO31661Alpha2: [Function],
        isISO31661Alpha3: [Function],
        isBase64: [Function],
        isDataURI: [Function],
        isMagnetURI: [Function],
        isMimeType: [Function],
        isLatLong: [Function],
        ltrim: [Function],
        rtrim: [Function],
        trim: [Function],
        escape: [Function],
        unescape: [Function],
        stripLow: [Function],
        whitelist: [Function],
        blacklist: [Function],
        isWhitelisted: [Function],
        normalizeEmail: [Function],
        toString: [Function],
        default: [Circular],
        isImmutable: [Function],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function],
        isDate: [Function] },
     Model: Model,
     DataTypes:
      { ABSTRACT: [Function],
        STRING: [Function],
        CHAR: [Function],
        TEXT: [Function],
        NUMBER: [Function],
        TINYINT: [Function],
        SMALLINT: [Function],
        MEDIUMINT: [Function],
        INTEGER: [Function],
        BIGINT: [Function],
        FLOAT: [Function],
        TIME: [Function],
        DATE: [Function],
        DATEONLY: [Function],
        BOOLEAN: [Function],
        NOW: [Function],
        BLOB: [Function],
        DECIMAL: [Function],
        NUMERIC: [Function],
        UUID: [Function],
        UUIDV1: [Function],
        UUIDV4: [Function],
        HSTORE: [Function],
        JSON: [Function],
        JSONB: [Function],
        VIRTUAL: [Function],
        ARRAY: [Function],
        ENUM: [Function],
        RANGE: [Function],
        REAL: [Function],
        'DOUBLE PRECISION': [Function],
        DOUBLE: [Function],
        GEOMETRY: [Function],
        GEOGRAPHY: [Function],
        CIDR: [Function],
        INET: [Function],
        MACADDR: [Function],
        CITEXT: [Function],
        postgres: [Object],
        mysql: [Object],
        mariadb: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] types: {}, key: 'ABSTRACT' },
     STRING: { [Function: STRING] types: [Object], key: 'STRING' },
     CHAR: { [Function: CHAR] types: [Object], key: 'CHAR' },
     TEXT: { [Function: TEXT] types: [Object], key: 'TEXT' },
     NUMBER: { [Function: NUMBER] types: {}, key: 'NUMBER' },
     TINYINT: { [Function: TINYINT] types: [Object], key: 'TINYINT' },
     SMALLINT: { [Function: SMALLINT] types: [Object], key: 'SMALLINT' },
     MEDIUMINT: { [Function: MEDIUMINT] types: [Object], key: 'MEDIUMINT' },
     INTEGER: { [Function: INTEGER] types: [Object], key: 'INTEGER' },
     BIGINT: { [Function: BIGINT] types: [Object], key: 'BIGINT' },
     FLOAT: { [Function: FLOAT] types: [Object], key: 'FLOAT' },
     TIME: { [Function: TIME] types: [Object], key: 'TIME' },
     DATE: { [Function: DATE] types: [Object], key: 'DATE' },
     DATEONLY: { [Function: DATEONLY] types: [Object], key: 'DATEONLY' },
     BOOLEAN:
      { [Function: BOOLEAN] parse: [Function: _sanitize], types: [Object], key: 'BOOLEAN' },
     NOW: { [Function: NOW] types: {}, key: 'NOW' },
     BLOB: { [Function: BLOB] types: [Object], key: 'BLOB' },
     DECIMAL: { [Function: DECIMAL] types: [Object], key: 'DECIMAL' },
     NUMERIC: { [Function: DECIMAL] types: [Object], key: 'DECIMAL' },
     UUID: { [Function: UUID] types: [Object], key: 'UUID' },
     UUIDV1: { [Function: UUIDV1] types: {}, key: 'UUIDV1' },
     UUIDV4: { [Function: UUIDV4] types: {}, key: 'UUIDV4' },
     HSTORE: { [Function: HSTORE] types: [Object], key: 'HSTORE' },
     JSON: { [Function: JSONTYPE] types: [Object], key: 'JSON' },
     JSONB: { [Function: JSONB] types: [Object], key: 'JSONB' },
     VIRTUAL: { [Function: VIRTUAL] types: {}, key: 'VIRTUAL' },
     ARRAY: { [Function: ARRAY] types: {}, key: 'ARRAY' },
     ENUM: { [Function: ENUM] types: [Object], key: 'ENUM' },
     RANGE: { [Function: RANGE] types: [Object], key: 'RANGE' },
     REAL: { [Function: REAL] types: [Object], key: 'REAL' },
     'DOUBLE PRECISION':
      { [Function: DOUBLE] types: [Object], key: 'DOUBLE PRECISION' },
     DOUBLE:
      { [Function: DOUBLE] types: [Object], key: 'DOUBLE PRECISION' },
     GEOMETRY: { [Function: GEOMETRY] types: [Object], key: 'GEOMETRY' },
     GEOGRAPHY: { [Function: GEOGRAPHY] types: [Object], key: 'GEOGRAPHY' },
     CIDR: { [Function: CIDR] types: [Object], key: 'CIDR' },
     INET: { [Function: INET] types: [Object], key: 'INET' },
     MACADDR: { [Function: MACADDR] types: [Object], key: 'MACADDR' },
     CITEXT: { [Function: CITEXT] types: [Object], key: 'CITEXT' },
     postgres:
      { DECIMAL: [Function: DECIMAL],
        BLOB: [Function: BLOB],
        STRING: [Function: STRING],
        CHAR: [Function: CHAR],
        TEXT: [Function: TEXT],
        CITEXT: [Function: CITEXT],
        TINYINT: [Function: TINYINT],
        SMALLINT: [Function: SMALLINT],
        INTEGER: [Function],
        BIGINT: [Function: BIGINT],
        BOOLEAN: [Function],
        DATE: [Function: DATE],
        DATEONLY: [Function: DATEONLY],
        REAL: [Function: REAL],
        'DOUBLE PRECISION': [Function: DOUBLE],
        FLOAT: [Function: FLOAT],
        GEOMETRY: [Function: GEOMETRY],
        GEOGRAPHY: [Function: GEOGRAPHY],
        HSTORE: [Function: HSTORE],
        RANGE: [Function: RANGE],
        ENUM: [Function: ENUM] },
     mysql:
      { ENUM: [Function: ENUM],
        DATE: [Function: DATE],
        DATEONLY: [Function: DATEONLY],
        UUID: [Function: UUID],
        GEOMETRY: [Function: GEOMETRY],
        DECIMAL: [Function: DECIMAL],
        JSON: [Function: JSONTYPE] },
     mariadb:
      { ENUM: [Function: ENUM],
        DATE: [Function: DATE],
        DATEONLY: [Function: DATEONLY],
        UUID: [Function: UUID],
        GEOMETRY: [Function: GEOMETRY],
        DECIMAL: [Function: DECIMAL],
        JSON: [Function: JSONTYPE] },
     sqlite:
      { DATE: [Function: DATE],
        DATEONLY: [Function: DATEONLY],
        STRING: [Function: STRING],
        CHAR: [Function: CHAR],
        NUMBER: [Function: NUMBER],
        FLOAT: [Function],
        REAL: [Function],
        'DOUBLE PRECISION': [Function],
        TINYINT: [Function: TINYINT],
        SMALLINT: [Function: SMALLINT],
        MEDIUMINT: [Function: MEDIUMINT],
        INTEGER: [Function: INTEGER],
        BIGINT: [Function: BIGINT],
        TEXT: [Function: TEXT],
        ENUM: [Function: ENUM],
        JSON: [Function: JSONTYPE],
        CITEXT: [Function: CITEXT] },
     mssql:
      { BLOB: [Function: BLOB],
        BOOLEAN: [Function: BOOLEAN],
        ENUM: [Function: ENUM],
        STRING: [Function: STRING],
        UUID: [Function: UUID],
        DATE: [Function: DATE],
        DATEONLY: [Function: DATEONLY],
        NOW: [Function: NOW],
        TINYINT: [Function: TINYINT],
        SMALLINT: [Function: SMALLINT],
        INTEGER: [Function: INTEGER],
        BIGINT: [Function: BIGINT],
        REAL: [Function: REAL],
        FLOAT: [Function: FLOAT],
        TEXT: [Function: TEXT] },
     Deferrable:
      { INITIALLY_DEFERRED: [Function: INITIALLY_DEFERRED],
        INITIALLY_IMMEDIATE: [Function: INITIALLY_IMMEDIATE],
        NOT: [Function: NOT],
        SET_DEFERRED: [Function: SET_DEFERRED],
        SET_IMMEDIATE: [Function: SET_IMMEDIATE] },
     Association:
      { [Function: Association]
        BelongsTo: [Function],
        HasOne: [Function: HasOne],
        HasMany: [Function],
        BelongsToMany: [Function],
        default: [Circular],
        Association: [Circular] },
     useInflection: [Function: useInflection],
     _setupHooks: [Function: _setupHooks],
     runHooks: [Function: runHooks],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeAssociate: [Function],
     afterAssociate: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeDisconnect: [Function],
     afterDisconnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeQuery: [Function],
     afterQuery: [Function],
     Error: [Function: BaseError],
     BaseError: [Function: BaseError],
     AssociationError: [Function: AssociationError],
     BulkRecordError: [Function: BulkRecordError],
     ConnectionError: [Function: ConnectionError],
     DatabaseError: [Function: DatabaseError],
     EagerLoadingError: [Function: EagerLoadingError],
     EmptyResultError: [Function: EmptyResultError],
     InstanceError: [Function: InstanceError],
     OptimisticLockError: [Function: OptimisticLockError],
     QueryError: [Function: QueryError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError:
      { [Function: ValidationError] ValidationErrorItem: [Function] },
     ValidationErrorItem:
      { [Function: ValidationErrorItem] Origins: [Object], TypeStringMap: [Object] },
     AccessDeniedError: [Function: AccessDeniedError],
     ConnectionAcquireTimeoutError: [Function: ConnectionAcquireTimeoutError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     TimeoutError: [Function: TimeoutError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     Sequelize: [Circular],
     default: [Circular] } }
Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `type` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Categories` FROM `sequelize_passport`
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER auto_increment , `firstname` VARCHAR(255), `lastname` VARCHAR(255), `username` TEXT, `email` VARCHAR(255), `password` VARCHAR(255) NOT NULL, `experience` VARCHAR(255), `price` VARCHAR(255), `city` VARCHAR(255), `state` VARCHAR(255), `travel` VARCHAR(255), `last_login` DATETIME, `status` ENUM('active', 'inactive') DEFAULT 'active', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Users` FROM `sequelize_passport`
Listening on localhost:5000
